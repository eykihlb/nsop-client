package com.mydao.nsop.client.vo;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-04")
public class EntryInfo implements org.apache.thrift.TBase<EntryInfo, EntryInfo._Fields>, java.io.Serializable, Cloneable, Comparable<EntryInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EntryInfo");

  private static final org.apache.thrift.protocol.TField ENTRY_NET_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entryNetNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENTRY_SITE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entrySiteNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_LANE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entryLaneNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("entryTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENTRY_REC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryRecID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VEH_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("vehClass", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EntryInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EntryInfoTupleSchemeFactory();

  public String entryNetNo; // required
  public String entrySiteNo; // required
  public String entryLaneNo; // required
  public String entryTime; // required
  public String entryRecID; // required
  public String vehClass; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTRY_NET_NO((short)1, "entryNetNo"),
    ENTRY_SITE_NO((short)2, "entrySiteNo"),
    ENTRY_LANE_NO((short)3, "entryLaneNo"),
    ENTRY_TIME((short)4, "entryTime"),
    ENTRY_REC_ID((short)5, "entryRecID"),
    VEH_CLASS((short)6, "vehClass");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTRY_NET_NO
          return ENTRY_NET_NO;
        case 2: // ENTRY_SITE_NO
          return ENTRY_SITE_NO;
        case 3: // ENTRY_LANE_NO
          return ENTRY_LANE_NO;
        case 4: // ENTRY_TIME
          return ENTRY_TIME;
        case 5: // ENTRY_REC_ID
          return ENTRY_REC_ID;
        case 6: // VEH_CLASS
          return VEH_CLASS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTRY_NET_NO, new org.apache.thrift.meta_data.FieldMetaData("entryNetNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_SITE_NO, new org.apache.thrift.meta_data.FieldMetaData("entrySiteNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_LANE_NO, new org.apache.thrift.meta_data.FieldMetaData("entryLaneNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("entryTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_REC_ID, new org.apache.thrift.meta_data.FieldMetaData("entryRecID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VEH_CLASS, new org.apache.thrift.meta_data.FieldMetaData("vehClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EntryInfo.class, metaDataMap);
  }

  public EntryInfo() {
  }

  public EntryInfo(
    String entryNetNo,
    String entrySiteNo,
    String entryLaneNo,
    String entryTime,
    String entryRecID,
    String vehClass)
  {
    this();
    this.entryNetNo = entryNetNo;
    this.entrySiteNo = entrySiteNo;
    this.entryLaneNo = entryLaneNo;
    this.entryTime = entryTime;
    this.entryRecID = entryRecID;
    this.vehClass = vehClass;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EntryInfo(EntryInfo other) {
    if (other.isSetEntryNetNo()) {
      this.entryNetNo = other.entryNetNo;
    }
    if (other.isSetEntrySiteNo()) {
      this.entrySiteNo = other.entrySiteNo;
    }
    if (other.isSetEntryLaneNo()) {
      this.entryLaneNo = other.entryLaneNo;
    }
    if (other.isSetEntryTime()) {
      this.entryTime = other.entryTime;
    }
    if (other.isSetEntryRecID()) {
      this.entryRecID = other.entryRecID;
    }
    if (other.isSetVehClass()) {
      this.vehClass = other.vehClass;
    }
  }

  public EntryInfo deepCopy() {
    return new EntryInfo(this);
  }

  @Override
  public void clear() {
    this.entryNetNo = null;
    this.entrySiteNo = null;
    this.entryLaneNo = null;
    this.entryTime = null;
    this.entryRecID = null;
    this.vehClass = null;
  }

  public String getEntryNetNo() {
    return this.entryNetNo;
  }

  public EntryInfo setEntryNetNo(String entryNetNo) {
    this.entryNetNo = entryNetNo;
    return this;
  }

  public void unsetEntryNetNo() {
    this.entryNetNo = null;
  }

  /** Returns true if field entryNetNo is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryNetNo() {
    return this.entryNetNo != null;
  }

  public void setEntryNetNoIsSet(boolean value) {
    if (!value) {
      this.entryNetNo = null;
    }
  }

  public String getEntrySiteNo() {
    return this.entrySiteNo;
  }

  public EntryInfo setEntrySiteNo(String entrySiteNo) {
    this.entrySiteNo = entrySiteNo;
    return this;
  }

  public void unsetEntrySiteNo() {
    this.entrySiteNo = null;
  }

  /** Returns true if field entrySiteNo is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrySiteNo() {
    return this.entrySiteNo != null;
  }

  public void setEntrySiteNoIsSet(boolean value) {
    if (!value) {
      this.entrySiteNo = null;
    }
  }

  public String getEntryLaneNo() {
    return this.entryLaneNo;
  }

  public EntryInfo setEntryLaneNo(String entryLaneNo) {
    this.entryLaneNo = entryLaneNo;
    return this;
  }

  public void unsetEntryLaneNo() {
    this.entryLaneNo = null;
  }

  /** Returns true if field entryLaneNo is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryLaneNo() {
    return this.entryLaneNo != null;
  }

  public void setEntryLaneNoIsSet(boolean value) {
    if (!value) {
      this.entryLaneNo = null;
    }
  }

  public String getEntryTime() {
    return this.entryTime;
  }

  public EntryInfo setEntryTime(String entryTime) {
    this.entryTime = entryTime;
    return this;
  }

  public void unsetEntryTime() {
    this.entryTime = null;
  }

  /** Returns true if field entryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryTime() {
    return this.entryTime != null;
  }

  public void setEntryTimeIsSet(boolean value) {
    if (!value) {
      this.entryTime = null;
    }
  }

  public String getEntryRecID() {
    return this.entryRecID;
  }

  public EntryInfo setEntryRecID(String entryRecID) {
    this.entryRecID = entryRecID;
    return this;
  }

  public void unsetEntryRecID() {
    this.entryRecID = null;
  }

  /** Returns true if field entryRecID is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryRecID() {
    return this.entryRecID != null;
  }

  public void setEntryRecIDIsSet(boolean value) {
    if (!value) {
      this.entryRecID = null;
    }
  }

  public String getVehClass() {
    return this.vehClass;
  }

  public EntryInfo setVehClass(String vehClass) {
    this.vehClass = vehClass;
    return this;
  }

  public void unsetVehClass() {
    this.vehClass = null;
  }

  /** Returns true if field vehClass is set (has been assigned a value) and false otherwise */
  public boolean isSetVehClass() {
    return this.vehClass != null;
  }

  public void setVehClassIsSet(boolean value) {
    if (!value) {
      this.vehClass = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTRY_NET_NO:
      if (value == null) {
        unsetEntryNetNo();
      } else {
        setEntryNetNo((String)value);
      }
      break;

    case ENTRY_SITE_NO:
      if (value == null) {
        unsetEntrySiteNo();
      } else {
        setEntrySiteNo((String)value);
      }
      break;

    case ENTRY_LANE_NO:
      if (value == null) {
        unsetEntryLaneNo();
      } else {
        setEntryLaneNo((String)value);
      }
      break;

    case ENTRY_TIME:
      if (value == null) {
        unsetEntryTime();
      } else {
        setEntryTime((String)value);
      }
      break;

    case ENTRY_REC_ID:
      if (value == null) {
        unsetEntryRecID();
      } else {
        setEntryRecID((String)value);
      }
      break;

    case VEH_CLASS:
      if (value == null) {
        unsetVehClass();
      } else {
        setVehClass((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTRY_NET_NO:
      return getEntryNetNo();

    case ENTRY_SITE_NO:
      return getEntrySiteNo();

    case ENTRY_LANE_NO:
      return getEntryLaneNo();

    case ENTRY_TIME:
      return getEntryTime();

    case ENTRY_REC_ID:
      return getEntryRecID();

    case VEH_CLASS:
      return getVehClass();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTRY_NET_NO:
      return isSetEntryNetNo();
    case ENTRY_SITE_NO:
      return isSetEntrySiteNo();
    case ENTRY_LANE_NO:
      return isSetEntryLaneNo();
    case ENTRY_TIME:
      return isSetEntryTime();
    case ENTRY_REC_ID:
      return isSetEntryRecID();
    case VEH_CLASS:
      return isSetVehClass();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EntryInfo)
      return this.equals((EntryInfo)that);
    return false;
  }

  public boolean equals(EntryInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_entryNetNo = true && this.isSetEntryNetNo();
    boolean that_present_entryNetNo = true && that.isSetEntryNetNo();
    if (this_present_entryNetNo || that_present_entryNetNo) {
      if (!(this_present_entryNetNo && that_present_entryNetNo))
        return false;
      if (!this.entryNetNo.equals(that.entryNetNo))
        return false;
    }

    boolean this_present_entrySiteNo = true && this.isSetEntrySiteNo();
    boolean that_present_entrySiteNo = true && that.isSetEntrySiteNo();
    if (this_present_entrySiteNo || that_present_entrySiteNo) {
      if (!(this_present_entrySiteNo && that_present_entrySiteNo))
        return false;
      if (!this.entrySiteNo.equals(that.entrySiteNo))
        return false;
    }

    boolean this_present_entryLaneNo = true && this.isSetEntryLaneNo();
    boolean that_present_entryLaneNo = true && that.isSetEntryLaneNo();
    if (this_present_entryLaneNo || that_present_entryLaneNo) {
      if (!(this_present_entryLaneNo && that_present_entryLaneNo))
        return false;
      if (!this.entryLaneNo.equals(that.entryLaneNo))
        return false;
    }

    boolean this_present_entryTime = true && this.isSetEntryTime();
    boolean that_present_entryTime = true && that.isSetEntryTime();
    if (this_present_entryTime || that_present_entryTime) {
      if (!(this_present_entryTime && that_present_entryTime))
        return false;
      if (!this.entryTime.equals(that.entryTime))
        return false;
    }

    boolean this_present_entryRecID = true && this.isSetEntryRecID();
    boolean that_present_entryRecID = true && that.isSetEntryRecID();
    if (this_present_entryRecID || that_present_entryRecID) {
      if (!(this_present_entryRecID && that_present_entryRecID))
        return false;
      if (!this.entryRecID.equals(that.entryRecID))
        return false;
    }

    boolean this_present_vehClass = true && this.isSetVehClass();
    boolean that_present_vehClass = true && that.isSetVehClass();
    if (this_present_vehClass || that_present_vehClass) {
      if (!(this_present_vehClass && that_present_vehClass))
        return false;
      if (!this.vehClass.equals(that.vehClass))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEntryNetNo()) ? 131071 : 524287);
    if (isSetEntryNetNo())
      hashCode = hashCode * 8191 + entryNetNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntrySiteNo()) ? 131071 : 524287);
    if (isSetEntrySiteNo())
      hashCode = hashCode * 8191 + entrySiteNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntryLaneNo()) ? 131071 : 524287);
    if (isSetEntryLaneNo())
      hashCode = hashCode * 8191 + entryLaneNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntryTime()) ? 131071 : 524287);
    if (isSetEntryTime())
      hashCode = hashCode * 8191 + entryTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntryRecID()) ? 131071 : 524287);
    if (isSetEntryRecID())
      hashCode = hashCode * 8191 + entryRecID.hashCode();

    hashCode = hashCode * 8191 + ((isSetVehClass()) ? 131071 : 524287);
    if (isSetVehClass())
      hashCode = hashCode * 8191 + vehClass.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EntryInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntryNetNo()).compareTo(other.isSetEntryNetNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryNetNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryNetNo, other.entryNetNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntrySiteNo()).compareTo(other.isSetEntrySiteNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrySiteNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrySiteNo, other.entrySiteNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryLaneNo()).compareTo(other.isSetEntryLaneNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryLaneNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryLaneNo, other.entryLaneNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryTime()).compareTo(other.isSetEntryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryTime, other.entryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryRecID()).compareTo(other.isSetEntryRecID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryRecID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryRecID, other.entryRecID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehClass()).compareTo(other.isSetVehClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehClass, other.vehClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EntryInfo(");
    boolean first = true;

    sb.append("entryNetNo:");
    if (this.entryNetNo == null) {
      sb.append("null");
    } else {
      sb.append(this.entryNetNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entrySiteNo:");
    if (this.entrySiteNo == null) {
      sb.append("null");
    } else {
      sb.append(this.entrySiteNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryLaneNo:");
    if (this.entryLaneNo == null) {
      sb.append("null");
    } else {
      sb.append(this.entryLaneNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryTime:");
    if (this.entryTime == null) {
      sb.append("null");
    } else {
      sb.append(this.entryTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryRecID:");
    if (this.entryRecID == null) {
      sb.append("null");
    } else {
      sb.append(this.entryRecID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehClass:");
    if (this.vehClass == null) {
      sb.append("null");
    } else {
      sb.append(this.vehClass);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntryInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntryInfoStandardScheme getScheme() {
      return new EntryInfoStandardScheme();
    }
  }

  private static class EntryInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<EntryInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EntryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTRY_NET_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryNetNo = iprot.readString();
              struct.setEntryNetNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTRY_SITE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entrySiteNo = iprot.readString();
              struct.setEntrySiteNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY_LANE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryLaneNo = iprot.readString();
              struct.setEntryLaneNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryTime = iprot.readString();
              struct.setEntryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENTRY_REC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryRecID = iprot.readString();
              struct.setEntryRecIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VEH_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehClass = iprot.readString();
              struct.setVehClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EntryInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entryNetNo != null) {
        oprot.writeFieldBegin(ENTRY_NET_NO_FIELD_DESC);
        oprot.writeString(struct.entryNetNo);
        oprot.writeFieldEnd();
      }
      if (struct.entrySiteNo != null) {
        oprot.writeFieldBegin(ENTRY_SITE_NO_FIELD_DESC);
        oprot.writeString(struct.entrySiteNo);
        oprot.writeFieldEnd();
      }
      if (struct.entryLaneNo != null) {
        oprot.writeFieldBegin(ENTRY_LANE_NO_FIELD_DESC);
        oprot.writeString(struct.entryLaneNo);
        oprot.writeFieldEnd();
      }
      if (struct.entryTime != null) {
        oprot.writeFieldBegin(ENTRY_TIME_FIELD_DESC);
        oprot.writeString(struct.entryTime);
        oprot.writeFieldEnd();
      }
      if (struct.entryRecID != null) {
        oprot.writeFieldBegin(ENTRY_REC_ID_FIELD_DESC);
        oprot.writeString(struct.entryRecID);
        oprot.writeFieldEnd();
      }
      if (struct.vehClass != null) {
        oprot.writeFieldBegin(VEH_CLASS_FIELD_DESC);
        oprot.writeString(struct.vehClass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntryInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntryInfoTupleScheme getScheme() {
      return new EntryInfoTupleScheme();
    }
  }

  private static class EntryInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<EntryInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EntryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEntryNetNo()) {
        optionals.set(0);
      }
      if (struct.isSetEntrySiteNo()) {
        optionals.set(1);
      }
      if (struct.isSetEntryLaneNo()) {
        optionals.set(2);
      }
      if (struct.isSetEntryTime()) {
        optionals.set(3);
      }
      if (struct.isSetEntryRecID()) {
        optionals.set(4);
      }
      if (struct.isSetVehClass()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetEntryNetNo()) {
        oprot.writeString(struct.entryNetNo);
      }
      if (struct.isSetEntrySiteNo()) {
        oprot.writeString(struct.entrySiteNo);
      }
      if (struct.isSetEntryLaneNo()) {
        oprot.writeString(struct.entryLaneNo);
      }
      if (struct.isSetEntryTime()) {
        oprot.writeString(struct.entryTime);
      }
      if (struct.isSetEntryRecID()) {
        oprot.writeString(struct.entryRecID);
      }
      if (struct.isSetVehClass()) {
        oprot.writeString(struct.vehClass);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EntryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.entryNetNo = iprot.readString();
        struct.setEntryNetNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.entrySiteNo = iprot.readString();
        struct.setEntrySiteNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entryLaneNo = iprot.readString();
        struct.setEntryLaneNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.entryTime = iprot.readString();
        struct.setEntryTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.entryRecID = iprot.readString();
        struct.setEntryRecIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vehClass = iprot.readString();
        struct.setVehClassIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

